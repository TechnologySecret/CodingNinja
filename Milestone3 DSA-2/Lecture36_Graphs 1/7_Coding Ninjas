/*
Coding Ninjas
Send Feedback
Given a NxM matrix containing Uppercase English Alphabets only. Your task is to tell if there is a path in the given matrix which makes the sentence “CODINGNINJA” .
There is a path from any cell to all its neighbouring cells. For a particular cell, neighbouring cells are those cells that share an edge or a corner with the cell.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns in the matrix. 
Each of the following N lines contain M characters. Please note that characters are not space separated.
Output Format :
Print 1 if there is a path which makes the sentence “CODINGNINJA” else print 0.
Constraints :
1 <= N <= 1000
1 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
2 11
CXDXNXNXNXA
XOXIXGXIXJX
Sample Output 1:
1
*/



public class Solution {

	int helper(char[][] mat, boolean[][] visited, int n, int m, int i, int j, String word) {
		if (word.length() == 1) {
			if (mat[i][j] == word.charAt(0)) {
				return 1;
			}
			return 0;
		}

		if (i < 0 || j < 0 || i >= n || j >= m || mat[i][j] != word.charAt(0)) {
			return 0;
		}
		if (mat[i][j] == word.charAt(0)) {
			visited[i][j] = true;
			if (i - 1 >= 0 && !visited[i - 1][j]) {
				if (helper(mat, visited, n, m, i - 1, j, word.substring(1)) == 1) {
					return 1;
				}
			}

			if (i - 1 >= 0 && j + 1 < m && !visited[i - 1][j + 1]) {
				if (helper(mat, visited, n, m, i - 1, j + 1, word.substring(1)) == 1) {
					return 1;
				}
			}

			if (j + 1 < m && !visited[i][j + 1]) {
				if (helper(mat, visited, n, m, i, j + 1, word.substring(1)) == 1) {
					return 1;
				}
			}

			if (i + 1 < n && j + 1 < m && !visited[i + 1][j + 1]) {
				if (helper(mat, visited, n, m, i + 1, j + 1, word.substring(1)) == 1) {
					return 1;
				}
			}

			if (i + 1 < n && !visited[i + 1][j]) {
				if (helper(mat, visited, n, m, i + 1, j, word.substring(1)) == 1) {
					return 1;
				}
			}

			if (i + 1 < n && j - 1 >= 0 && !visited[i + 1][j - 1]) {
				if (helper(mat, visited, n, m, i + 1, j - 1, word.substring(1)) == 1) {
					return 1;
				}
			}

			if (j - 1 >= 0 && !visited[i][j - 1]) {
				if (helper(mat, visited, n, m, i, j - 1, word.substring(1)) == 1) {
					return 1;
				}
			}

			if (i - 1 >= 0 && j - 1 >= 0 && !visited[i - 1][j - 1]) {
				if (helper(mat, visited, n, m, i - 1, j - 1, word.substring(1)) == 1) {
					return 1;
				}
			}

			visited[i][j] = false;
		}
		return 0;
	}

	int solve(String[] Graph, int N, int M) {
		char[][] mat = new char[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				mat[i][j] = Graph[i].charAt(j);
			}
		}

		boolean[][] visited = new boolean[N][M];
		int res = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				res = helper(mat, visited, N, M, i, j, "CODINGNINJA");
				if (res == 1) {
					return 1;
				}
			}
		}
		return 0;
		
	}
}

