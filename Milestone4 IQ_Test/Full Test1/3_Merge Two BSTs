/*******************

Merge Two BSTs
Send Feedback
Given two binary search trees ,merge the two given balanced BSTs into a balanced binary search tree.
Note: You just have to return the root of the balanced BST.
Give solution of O(m+n) time complexity.
Input format :
Line 1 :  Elements in level order form of first tree (separated by space)
(If any node does not have left or right child, take -1 in its place)
Line 2: Elements in level order form of second tree (separated by space)
(If any node does not have left or right child, take -1 in its place)
Output Format :
Print the inorder form of new BST
Sample Input 1:
2 1 3 -1 -1 -1 -1
4 -1 -1
Sample Output 1:
 1 2 3 4 
 *******************/
 
 
 import java.util.*;

public class solution {
	static void printMergeTrees(BinaryTreeNode<Integer> root1,
			BinaryTreeNode<Integer> root2) {
		ArrayList < Integer > temp1 = new ArrayList < Integer > ();
        storeInOrder(root1, temp1);
        ArrayList < Integer > temp2 = new ArrayList < Integer > ();
        storeInOrder(root2, temp2);
        ArrayList < Integer > temp3 = mergeSortedArrays(temp1, temp2);
        BinaryTreeNode<Integer> node = constructBSTFromSortedArray(temp3, 0, temp3.size() - 1);
        inorder(node);
	}
    public static void inorder(BinaryTreeNode<Integer> node)
    {
        if(node==null)
            return;
        inorder(node.left);
        System.out.print(node.data+" ");
        inorder(node.right);
    }
     public static void storeInOrder(BinaryTreeNode<Integer> root, ArrayList < Integer > arr) {
        if (root != null) {
            storeInOrder(root.left, arr);
            arr.add(root.data);
            storeInOrder(root.right, arr);
        }
    }
    static ArrayList < Integer > mergeSortedArrays(ArrayList < Integer > arr1, ArrayList < Integer > arr2) {

        int m = arr1.size();
        int n = arr2.size();
        ArrayList < Integer > arr = new ArrayList < > ();
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (arr1.get(i) < arr2.get(j)) {
                arr.add(arr1.get(i));
                i++;
            } else {
                arr.add(arr2.get(j));
                j++;
            }
        }
        while (i < m) {
            arr.add(arr1.get(i));
            i++;
        }
        while (j < n) {
            arr.add(arr2.get(j));
            j++;
        }
        return arr;
    }
    static BinaryTreeNode<Integer> constructBSTFromSortedArray(ArrayList < Integer > arr, int start, int end) {
        
        if (start > end) {
            return null;
        }
        int mid = (start + end) / 2;
        BinaryTreeNode<Integer> node = new BinaryTreeNode(arr.get(mid));
        node.left = constructBSTFromSortedArray(arr, start, mid - 1);
        node.right = constructBSTFromSortedArray(arr, mid + 1, end);

		return node;
	}
}
