/*
Sort an array
Send Feedback
Given an array A[] of integers, sort the array according to frequency of elements. That is elements that have higher frequency come first. If frequencies of two elements are same, then smaller number comes first.
Input Format:
The first line contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array. 
Output Format:
Print the soted array seperated by a space.
Example:
Input:
6
1 2 2 2 3 3
Output:
2 2 2 3 3 1
*/

import java.util.*;
public class Solution { 
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int nums[] = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = s.nextInt();
        }
        Map<Integer, Integer> freq = new HashMap();
        List<Integer> numList = new ArrayList();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            numList.add(num);
        }

        Collections.sort(numList,
                (a, b) -> {
                    if (freq.get(a) == freq.get(b)) {
                        return Integer.compare(b, a);
                    } else {
                        return Integer.compare(freq.get(a), freq.get(b));
                    }
                });

        int[] sortedArray = new int[nums.length];

        for (int idx = 0; idx < nums.length; idx++) {
            sortedArray[idx] = numList.get(idx);
        }

        for (int i = nums.length - 1; i >= 0; i--) {
            System.out.print(sortedArray[i] + " ");
        }
    }
} 

