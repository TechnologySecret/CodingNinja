/*
Count Words in Trie
Send Feedback
You are given the Trie class with following functions -
1. insertWord
2. removeWord
Now, you need to create one more function (named "countWords" ) which returns the number of words currently present in Trie in O(1) time complexity.
Note : You can change the already given functions in the Trie class, if required.
*/
/*************
 * 8
 * Main function -
 * 
 * public static void main(String[] args) {
 * Trie t = new Trie();
 * int choice = s.nextInt();
 * 
 * while(choice != -1) {
 * String word;
 * switch(choice) {
 * case 1 : // insert
 * word = s.next();
 * t.add(word);
 * break;
 * case 2 : // search
 * word = s.next();
 * System.out.println(t.search(word));
 * break;
 * case 3 :
 * word = s.next();
 * t.remove(word);
 * break;
 * case 4 :
 * System.out.println(t.countWords());
 * break;
 * default :
 * return;
 * }
 * choice = s.nextInt();
 * }
 * }
 *******************/

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	private int numWords;

	public Trie() {
		root = new TrieNode('\0');
		numWords = 0;
	}

	public boolean search(String word) {
		return search(root, word);
	}

	private boolean search(TrieNode root, String word) {
		if (word.length() == 0) {
			return root.isTerminating;
		}
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if (child == null) {
			return false;
		}
		return search(child, word.substring(1));
	}

	public void remove(String word) {
		if (remove(root, word)) {
			numWords--;
		}
	}

	private boolean remove(TrieNode root, String word) {
		if (word.length() == 0) {
			if (root.isTerminating) {
				root.isTerminating = false;
				return true;
			} else {
				return false;
			}
		}
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if (child == null) {
			return false;
		}
		boolean ans = remove(child, word.substring(1));
		// We can remove child node only if it is non terminating and its number of
		// children are 0

		if (!child.isTerminating && child.childCount == 0) {
			root.children[childIndex] = null;
			child = null;
			root.childCount--;
		}
		return ans;
	}

	private boolean add(TrieNode root, String word) {
		if (word.length() == 0) {
			if (root.isTerminating) {
				return false;
			} else {
				root.isTerminating = true;
				return true;
			}
		}
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if (child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		return add(child, word.substring(1));
	}

	public void add(String word) {
		if (add(root, word)) {
			numWords++;
		}
	}

	public int countWords() {
		return numWords;

	}

}
